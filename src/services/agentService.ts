// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏ ElevenLabs

import { apiService } from './apiService';

export interface Agent {
  id: number;
  name: string;
  description: string;
  elevenLabsAgentId: string;
  status: 'ACTIVE' | 'INACTIVE' | 'DELETED' | 'ERROR';
  interviewId: number;
  positionId: number;
  config: AgentConfig;
  createdAt: string;
  updatedAt: string;
}

export interface AgentConfig {
  name: string;
  description: string;
  prompt: string;
  voiceId: string;
  voiceSettings?: VoiceSettings;
  tools: string[];
  webhookUrl: string;
  language: string;
  personality: string;
}

export interface VoiceSettings {
  stability: number;
  similarityBoost: number;
  style: number;
  useSpeakerBoost: boolean;
}

export interface Interview {
  id: number;
  candidateId: number;
  positionId: number;
  status: string;
  candidate?: Candidate;
  position?: Position;
}

export interface Position {
  id: number;
  title: string;
  description?: string;
  level?: string;
  language?: string;
}

export interface Candidate {
  id: number;
  firstName: string;
  lastName: string;
  email?: string;
}

export class AgentService {
  private static instance: AgentService;
  
  private constructor() {}
  
  static getInstance(): AgentService {
    if (!AgentService.instance) {
      AgentService.instance = new AgentService();
    }
    return AgentService.instance;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   */
  async createAgentForInterview(interviewId: number): Promise<Agent> {
    try {
      console.log(`ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewId}...`);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é
      const interview = await this.getInterview(interviewId);
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω–∞:', interview);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
      const existingAgent = await this.getAgentByInterviewId(interviewId);
      if (existingAgent) {
        console.log('‚úÖ –ê–≥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAgent);
        return existingAgent;
      }
      
      // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞
      const config = this.buildAgentConfig(interview);
      console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', config);
      
      // 4. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
      const agent = await this.createAgent({
        interviewId,
        config
      });
      
      console.log('‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', agent);
      return agent;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  private async getInterview(interviewId: number): Promise<Interview> {
    try {
      const response = await apiService.get(`/interviews/${interviewId}`);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', error);
      throw new Error('–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  private async getAgentByInterviewId(interviewId: number): Promise<Agent | null> {
    try {
      const response = await apiService.get('/agents', {
        params: { interviewId }
      });
      
      const agents = response.data.content || [];
      return agents.length > 0 ? agents[0] : null;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  private buildAgentConfig(interview: Interview): AgentConfig {
    const position = interview.position;
    const candidate = interview.candidate;
    
    if (!position) {
      throw new Error('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const prompt = this.buildInterviewPrompt(position, candidate);
    const voiceId = this.selectVoiceForPosition(position);
    const webhookUrl = this.buildWebhookUrl(interview.id);

    return {
      name: `Interview Agent - ${position.title}`,
      description: `AI interviewer for ${position.title} position`,
      prompt,
      voiceId,
      voiceSettings: {
        stability: 0.75,
        similarityBoost: 0.85,
        style: 0.5,
        useSpeakerBoost: true
      },
      tools: ['getNextQuestion', 'saveAnswer', 'endInterview'],
      webhookUrl,
      language: position.language || 'ru',
      personality: 'professional'
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
   */
  private buildInterviewPrompt(position: Position, candidate?: Candidate): string {
    const candidateName = candidate ? `${candidate.firstName} ${candidate.lastName}` : '–∫–∞–Ω–¥–∏–¥–∞—Ç';
    
    return `
–¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é "${position.title}".

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç getNextQuestion –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
2. –û–∑–≤—É—á–∏–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
3. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π saveAnswer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
5. –ó–∞–≤–µ—Ä—à–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

–ü–æ–∑–∏—Ü–∏—è: ${position.title}
${position.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${position.description}` : ''}
${position.level ? `–£—Ä–æ–≤–µ–Ω—å: ${position.level}` : ''}
${position.language ? `–Ø–∑—ã–∫: ${position.language}` : ''}
–ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidateName}

–ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –æ—Ç–≤–µ—Ç–∞–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    `.trim();
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
   */
  private selectVoiceForPosition(position: Position): string {
    const language = position.language?.toLowerCase() || 'ru';
    const level = position.level?.toLowerCase() || 'middle';
    
    // –ì–æ–ª–æ—Å–∞ ElevenLabs
    const voices = {
      ru: {
        senior: '21m00Tcm4TlvDq8ikWAM', // Rachel - –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–π
        default: 'pNInz6obpgDQGcFmaJgB'  // Adam - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
      },
      en: {
        senior: 'EXAVITQu4vr4xnSDxMaL', // Bella - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        default: 'pNInz6obpgDQGcFmaJgB'  // Adam - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
      }
    };
    
    const languageVoices = voices[language as keyof typeof voices] || voices.ru;
    return level === 'senior' ? languageVoices.senior : languageVoices.default;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è webhook
   */
  private buildWebhookUrl(interviewId: number): string {
    const baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';
    return `${baseUrl}/api/v1/webhooks/elevenlabs/events?interviewId=${interviewId}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
   */
  private async createAgent(data: { interviewId: number; config: AgentConfig }): Promise<Agent> {
    try {
      const response = await apiService.post('/agents', data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ ID
   */
  async getAgent(agentId: number): Promise<Agent> {
    try {
      const response = await apiService.get(`/agents/${agentId}`);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      throw new Error('–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞
   */
  async updateAgent(agentId: number, config: Partial<AgentConfig>): Promise<Agent> {
    try {
      const response = await apiService.put(`/agents/${agentId}`, { config });
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞');
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞
   */
  async deleteAgent(agentId: number): Promise<void> {
    try {
      await apiService.delete(`/agents/${agentId}`);
      console.log('‚úÖ –ê–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞');
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞
   */
  async testAgent(agentId: number, message: string): Promise<string> {
    try {
      const response = await apiService.post(`/agents/${agentId}/test`, {
        message
      });
      return response.data.response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const agentService = AgentService.getInstance(); 