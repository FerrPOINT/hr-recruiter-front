// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è ElevenLabs SDK
// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤ —Ç–∏–ø–∞—Ö

export interface SessionConfig {
  agentId: string;
  voiceId?: string;
  onMessage?: (message: any) => void;
  onError?: (error: any) => void;
  onSessionEnd?: () => void;
}

export interface Session {
  sessionId: string;
  status: string;
  agentId: string;
}

export interface VoiceMessage {
  text: string;
  audio?: string;
  timestamp: string;
}

export class ElevenLabsSafe {
  private conversation: any;
  
  constructor(conversation: any) {
    this.conversation = conversation;
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é
   */
  async startSession(config: SessionConfig): Promise<Session> {
    if (!this.conversation) {
      throw new Error('Conversation not initialized');
    }
    
    if (typeof this.conversation.startSession === 'function') {
      try {
        const session = await this.conversation.startSession(config);
        console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞:', session);
        return session;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', error);
        throw error;
      }
    } else {
      throw new Error('startSession method not available in ElevenLabs SDK');
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendMessage(text: string): Promise<void> {
    if (!this.conversation) {
      throw new Error('Conversation not initialized');
    }
    
    if (typeof this.conversation.sendMessage === 'function') {
      try {
        await this.conversation.sendMessage(text);
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', text);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        throw error;
      }
    } else {
      throw new Error('sendMessage method not available in ElevenLabs SDK');
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é
   */
  async stopSession(): Promise<void> {
    if (!this.conversation) {
      console.warn('‚ö†Ô∏è Conversation not initialized, skipping stopSession');
      return;
    }
    
    if (typeof this.conversation.stopSession === 'function') {
      try {
        await this.conversation.stopSession();
        console.log('‚úÖ –°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        throw error;
      }
    } else {
      console.warn('‚ö†Ô∏è stopSession method not available in ElevenLabs SDK');
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
   */
  checkMethods(): { startSession: boolean; sendMessage: boolean; stopSession: boolean } {
    return {
      startSession: typeof this.conversation?.startSession === 'function',
      sendMessage: typeof this.conversation?.sendMessage === 'function',
      stopSession: typeof this.conversation?.stopSession === 'function'
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö
   */
  getAvailableMethods(): string[] {
    const methods: string[] = [];
    
    if (this.conversation) {
      Object.getOwnPropertyNames(this.conversation).forEach(name => {
        if (typeof this.conversation[name] === 'function') {
          methods.push(name);
        }
      });
    }
    
    return methods;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é conversation
   */
  isInitialized(): boolean {
    return this.conversation !== null && this.conversation !== undefined;
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const createElevenLabsSafe = (conversation: any): ElevenLabsSafe => {
  return new ElevenLabsSafe(conversation);
};

export const validateElevenLabsSDK = (conversation: any): boolean => {
  const safe = new ElevenLabsSafe(conversation);
  const methods = safe.checkMethods();
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ElevenLabs SDK –º–µ—Ç–æ–¥–æ–≤:', methods);
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
  const requiredMethods = ['startSession', 'sendMessage'];
  const missingMethods = requiredMethods.filter(method => !methods[method as keyof typeof methods]);
  
  if (missingMethods.length > 0) {
    console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã ElevenLabs SDK:', missingMethods);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', safe.getAvailableMethods());
    return false;
  }
  
  console.log('‚úÖ ElevenLabs SDK –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
  return true;
}; 