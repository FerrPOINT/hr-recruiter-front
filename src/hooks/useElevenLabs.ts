import { useState, useEffect, useCallback, useRef } from 'react';
import { useConversation } from '@elevenlabs/react';

interface VoiceSessionState {
  sessionId: string | null;
  status: 'idle' | 'connecting' | 'connected' | 'error' | 'ended';
  isListening: boolean;
  isSpeaking: boolean;
  isAgentSpeaking: boolean;
  isUserListening: boolean;
  currentQuestion: number;
  questions: string[];
  answers: Array<{
    questionId: number;
    text: string;
    durationMs: number;
    confidence: number;
    timestamp: string;
  }>;
}

interface UseElevenLabsOptions {
  agentId: string;
  voiceId?: string;
  onMessage?: (message: string) => void;
  onError?: (error: string) => void;
  onSessionEnd?: () => void;
  onAgentStart?: () => void;
  onAgentEnd?: () => void;
  onUserStart?: () => void;
  onUserEnd?: () => void;
}

export const useElevenLabs = (options: UseElevenLabsOptions) => {
  const { agentId, voiceId, onMessage, onError, onSessionEnd, onAgentStart, onAgentEnd, onUserStart, onUserEnd } = options;
  
  const [state, setState] = useState<VoiceSessionState>({
    sessionId: null,
    status: 'idle',
    isListening: false,
    isSpeaking: false,
    isAgentSpeaking: false,
    isUserListening: false,
    currentQuestion: 0,
    questions: [],
    answers: []
  });

  const conversation = useConversation({
    apiKey: process.env.REACT_APP_ELEVENLABS_API_KEY || 'dummy-key',
    voiceId: voiceId || 'pNInz6obpgDQGcFmaJgB',
    agentId: agentId
  });
  const sessionRef = useRef<string | null>(null);
  const isInitialized = useRef(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é conversation
  useEffect(() => {
    if (conversation) {
      console.log('‚úÖ ElevenLabs conversation initialized');
    } else {
      console.warn('‚ö†Ô∏è ElevenLabs conversation not initialized');
    }
  }, [conversation]);

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å conversation
  const safeStartSession = useCallback(async () => {
    if (!conversation) {
      throw new Error('Conversation not initialized');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ startSession
      if (typeof (conversation as any).startSession === 'function') {
        const session = await (conversation as any).startSession({
          agentId,
          voiceId: voiceId || 'pNInz6obpgDQGcFmaJgB', // Adam –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          onMessage: (message: any) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞:', message);
            if (onMessage) {
              onMessage(message.text || message);
            }
          },
          onError: (error: any) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏:', error);
            if (onError) {
              onError(error.message || '–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏');
            }
          },
          onAgentStart: () => {
            console.log('ü§ñ –ê–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
            setState(prev => ({ 
              ...prev, 
              isAgentSpeaking: true,
              isSpeaking: true 
            }));
            if (onAgentStart) onAgentStart();
          },
          onAgentEnd: () => {
            console.log('ü§ñ –ê–≥–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
            setState(prev => ({ 
              ...prev, 
              isAgentSpeaking: false,
              isSpeaking: false 
            }));
            if (onAgentEnd) onAgentEnd();
          },
          onUserStart: () => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
            setState(prev => ({ 
              ...prev, 
              isUserListening: true,
              isListening: true 
            }));
            if (onUserStart) onUserStart();
          },
          onUserEnd: () => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
            setState(prev => ({ 
              ...prev, 
              isUserListening: false,
              isListening: false 
            }));
            if (onUserEnd) onUserEnd();
          }
        });
        
        sessionRef.current = session?.sessionId || null;
        return session;
      } else {
        throw new Error('startSession method not available');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', error);
      throw error;
    }
  }, [conversation, agentId, voiceId, onMessage, onError, onAgentStart, onAgentEnd, onUserStart, onUserEnd]);

  const safeStopSession = useCallback(async () => {
    if (!conversation) {
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ stopSession
      if (typeof (conversation as any).stopSession === 'function') {
        await (conversation as any).stopSession();
        console.log('üõë –°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        console.warn('‚ö†Ô∏è stopSession method not available');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }, [conversation]);

  const safeSendMessage = useCallback(async (text: string) => {
    if (!conversation) {
      throw new Error('Conversation not initialized');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ sendMessage
      if (typeof (conversation as any).sendMessage === 'function') {
        await (conversation as any).sendMessage(text);
        console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', text);
      } else {
        throw new Error('sendMessage method not available');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }, [conversation]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  const startSession = useCallback(async () => {
    if (isInitialized.current) {
      console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    try {
      setState(prev => ({ ...prev, status: 'connecting' }));
      
      const session = await safeStartSession();
      
      setState(prev => ({
        ...prev,
        sessionId: session?.sessionId || null,
        status: 'connected'
      }));
      
      isInitialized.current = true;
      console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', error);
      setState(prev => ({ ...prev, status: 'error' }));
      if (onError) {
        onError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }
  }, [safeStartSession, onError]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
  const stopSession = useCallback(async () => {
    try {
      await safeStopSession();
      
      setState(prev => ({
        ...prev,
        status: 'ended',
        isListening: false,
        isSpeaking: false,
        isAgentSpeaking: false,
        isUserListening: false
      }));
      
      isInitialized.current = false;
      sessionRef.current = null;
      
      if (onSessionEnd) {
        onSessionEnd();
      }
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }, [safeStopSession, onSessionEnd]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (text: string) => {
    if (state.status !== 'connected') {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }

    try {
      await safeSendMessage(text);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      setState(prev => ({
        ...prev,
        answers: [...prev.answers, {
          questionId: prev.currentQuestion,
          text,
          durationMs: 0, // TODO: –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
          confidence: 1.0, // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
          timestamp: new Date().toISOString()
        }]
      }));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }, [safeSendMessage, state.status]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (isInitialized.current) {
        safeStopSession();
      }
    };
  }, [safeStopSession]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    sessionId: state.sessionId,
    status: state.status,
    isListening: state.isListening,
    isSpeaking: state.isSpeaking,
    isAgentSpeaking: state.isAgentSpeaking,
    isUserListening: state.isUserListening,
    currentQuestion: state.currentQuestion,
    questions: state.questions,
    answers: state.answers,
    
    // –ú–µ—Ç–æ–¥—ã
    startSession,
    stopSession,
    sendMessage,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    isConnected: state.status === 'connected',
    hasError: state.status === 'error',
    isEnded: state.status === 'ended'
  };
}; 