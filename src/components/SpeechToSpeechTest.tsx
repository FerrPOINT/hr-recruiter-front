/**
 * Speech to Speech Test Component
 * –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ElevenLabs Conversation AI
 */

import React, { useState } from 'react';
import { useElevenLabs } from '../hooks/useElevenLabs';

const SpeechToSpeechTest: React.FC = () => {
  const [agentId, setAgentId] = useState('your-agent-id-here');
  const [message, setMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);

  const {
    status,
    isListening,
    isSpeaking,
    startSession,
    stopSession,
    sendMessage,
    isConnected: voiceConnected,
    hasError,
    isEnded
  } = useElevenLabs({
    agentId,
    voiceId: 'pNInz6obpgDQGcFmaJgB', // Adam
    onMessage: (msg) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg);
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    },
    onSessionEnd: () => {
      console.log('üîö –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      setIsConnected(false);
    }
  });

  const handleConnect = async () => {
    try {
      await startSession();
      setIsConnected(true);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  const handleDisconnect = async () => {
    try {
      await stopSession();
      setIsConnected(false);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!message.trim()) return;
    
    try {
      await sendMessage(message);
      setMessage('');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">Speech-to-Speech Test</h2>
      
      {/* –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Agent ID:
        </label>
        <input
          type="text"
          value={agentId}
          onChange={(e) => setAgentId(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞"
        />
      </div>

      {/* –°—Ç–∞—Ç—É—Å */}
      <div className="mb-4 p-3 bg-gray-50 rounded-md">
        <div className="text-sm">
          <div className="flex items-center justify-between mb-2">
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              status === 'connected' ? 'bg-green-100 text-green-800' :
              status === 'error' ? 'bg-red-100 text-red-800' :
              'bg-gray-100 text-gray-800'
            }`}>
              {status}
            </span>
          </div>
          
          <div className="flex items-center justify-between mb-2">
            <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              voiceConnected ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
            }`}>
              {voiceConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </span>
          </div>
          
          <div className="flex items-center justify-between mb-2">
            <span>–ê–≥–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              isSpeaking ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
            }`}>
              {isSpeaking ? '–î–∞' : '–ù–µ—Ç'}
            </span>
          </div>
          
          <div className="flex items-center justify-between">
            <span>–°–ª—É—à–∞–µ–º –≤–∞—Å:</span>
            <span className={`px-2 py-1 rounded text-xs font-medium ${
              isListening ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
            }`}>
              {isListening ? '–î–∞' : '–ù–µ—Ç'}
            </span>
          </div>
        </div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="mb-4 space-y-2">
        {!isConnected ? (
          <button
            onClick={handleConnect}
            disabled={status === 'connecting'}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {status === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
          </button>
        ) : (
          <button
            onClick={handleDisconnect}
            className="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700"
          >
            –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        )}
      </div>

      {/* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      {isConnected && (
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –°–æ–æ–±—â–µ–Ω–∏–µ:
          </label>
          <div className="flex space-x-2">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            />
            <button
              onClick={handleSendMessage}
              disabled={!message.trim()}
              className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="text-xs text-gray-500">
        <p className="mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</p>
        <ul className="list-disc list-inside space-y-1">
          <li>–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ ElevenLabs</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏</li>
          <li>–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</li>
          <li>–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º</li>
        </ul>
      </div>
    </div>
  );
};

export default SpeechToSpeechTest; 