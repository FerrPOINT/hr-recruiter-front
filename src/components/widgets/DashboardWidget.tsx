import React, { useState, useEffect } from 'react';
import BaseWidget from './BaseWidget';
import { useDashboardData } from '../../hooks/useWidgetData';
import { AnalyticsReportsApi } from '../../client/apis/analytics-reports-api';
import { Configuration } from '../../client/configuration';
import { useAuthStore } from '../../store/authStore';
import { DashboardWidgetProps, ActivityItem, AnalyticsData, CandidateStats, InterviewStats, PositionStats } from './types';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º
const createApiConfig = (): Configuration => {
  return new Configuration({
    basePath: process.env.REACT_APP_API_BASE_URL || '/api/v1',
    accessToken: () => useAuthStore.getState().token || '',
  });
};

// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
function CompactMetric({ 
  title, 
  value, 
  icon, 
  color, 
  trend,
  trendValue
}: { 
  title: string, 
  value: number, 
  icon: string, 
  color: string, 
  trend?: 'up' | 'down' | 'neutral',
  trendValue?: number
}) {
  const getTrendIcon = () => {
    if (trend === 'up') return '‚Üó';
    if (trend === 'down') return '‚Üò';
    return '';
  };

  const getTrendColor = () => {
    if (trend === 'up') return 'text-green-600';
    if (trend === 'down') return 'text-red-600';
    return 'text-gray-500';
  };

  return (
    <div className={`bg-${color}-50 border border-${color}-200 rounded p-2 flex items-center justify-between`}>
      <div className="flex items-center space-x-2">
        <span className="text-lg">{icon}</span>
        <div>
          <div className="text-lg font-bold text-gray-800">{value.toLocaleString()}</div>
          <div className="text-xs text-gray-600">{title}</div>
        </div>
      </div>
      {trend && (
        <div className={`text-xs font-medium ${getTrendColor()}`}>
          {getTrendIcon()} {trendValue}%
        </div>
      )}
    </div>
  );
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
function CompactChart({ data, color }: { data: number[], color: string }) {
  const maxValue = Math.max(...data);
  const minValue = Math.min(...data);
  const range = maxValue - minValue || 1;
  
  return (
    <div className="flex items-end justify-between h-8 space-x-0.5">
      {data.map((value, index) => {
        const height = ((value - minValue) / range) * 100;
        return (
          <div
            key={index}
            className={`bg-${color}-400 rounded-t flex-1`}
            style={{ height: `${Math.max(height, 15)}%` }}
          />
        );
      })}
    </div>
  );
}

// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
function CompactActivity({ activity }: { activity: ActivityItem }) {
  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'interview': return 'üé§';
      case 'position': return 'üìã';
      case 'candidate': return 'üë§';
      case 'hired': return '‚úÖ';
      default: return 'üìù';
    }
  };

  return (
    <div className="flex items-center space-x-2 p-1 hover:bg-gray-50 rounded text-xs">
      <span className="text-sm">{getActivityIcon(activity.type)}</span>
      <div className="flex-1 min-w-0">
        <p className="font-medium text-gray-800 truncate">{activity.title}</p>
        <p className="text-gray-500">{activity.time}</p>
      </div>
    </div>
  );
}

const DashboardWidget: React.FC<DashboardWidgetProps> = ({
  id,
  isSelected,
  onClick,
  onClose,
  onRefresh,
  onMouseDown
}) => {
  const { data, loading, error, refresh } = useDashboardData();
  const { totalCandidates, totalPositions, totalInterviews, recentInterviews } = data;
  const positions = recentInterviews; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º recentInterviews –∫–∞–∫ positions
  const interviews = recentInterviews;
  const candidates: any[] = [];
  const stats = { totalCandidates, totalPositions, totalInterviews };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefresh = () => {
    console.log('[DashboardWidget] Refresh triggered');
    refresh(); // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π refresh –∏–∑ —Ö—É–∫–∞
    onRefresh?.(); // –í–Ω–µ—à–Ω–∏–π refresh –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
  };
  
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData>({});
  const [recentActivity, setRecentActivity] = useState<ActivityItem[]>([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  useEffect(() => {
    const loadAnalytics = async () => {
      try {
        const config = createApiConfig();
        const analyticsApi = new AnalyticsReportsApi(config);
        
        const [candidatesStats, interviewsStats, positionsStats] = await Promise.all([
          analyticsApi.getCandidatesStats(),
          analyticsApi.getInterviewsStats(),
          analyticsApi.getPositionsStats()
        ]);

        setAnalyticsData({
          candidates: {
            total: candidatesStats.data?.total ?? 0,
            inProgress: candidatesStats.data?.inProgress ?? 0,
            finished: candidatesStats.data?.finished ?? 0,
            hired: candidatesStats.data?.hired ?? 0,
            rejected: candidatesStats.data?.rejected ?? 0,
          },
          interviews: {
            total: interviewsStats.data?.total ?? 0,
            successful: interviewsStats.data?.successful ?? 0,
            unsuccessful: interviewsStats.data?.unsuccessful ?? 0,
            inProgress: interviewsStats.data?.inProgress ?? 0,
            notStarted: interviewsStats.data?.notStarted ?? 0,
            cancelled: interviewsStats.data?.cancelled ?? 0,
          },
          positions: Array.isArray(positionsStats.data) ? positionsStats.data : [],
        });
      } catch (error) {
        console.error('Error loading analytics:', error);
      }
    };

    loadAnalytics();
  }, []);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  useEffect(() => {
    const activities: ActivityItem[] = [
      { type: 'interview', title: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ò.–ü–µ—Ç—Ä–æ–≤—ã–º', time: '2 –º–∏–Ω', user: '–ê–Ω–Ω–∞' },
      { type: 'position', title: '–°–æ–∑–¥–∞–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è "Frontend Dev"', time: '15 –º–∏–Ω', user: '–ú–∞–∫—Å–∏–º' },
      { type: 'candidate', title: '–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –ú.–°–∏–¥–æ—Ä–æ–≤–∞', time: '1 —á', user: '–ï–ª–µ–Ω–∞' },
      { type: 'hired', title: '–ù–∞–Ω—è—Ç –ü.–ö–æ–∑–ª–æ–≤ –Ω–∞ QA', time: '2 —á', user: 'HR' },
      { type: 'interview', title: '–ù–∞—á–∞—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ê.–ò–≤–∞–Ω–æ–≤—ã–º', time: '3 —á', user: '–°–µ—Ä–≥–µ–π' },
      { type: 'position', title: '–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è "Backend Dev"', time: '4 —á', user: '–ú–∞–∫—Å–∏–º' }
    ];
    setRecentActivity(activities);
  }, []);

  // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
  const activeInterviews = Array.isArray(interviews) ? (interviews as { status: string }[]).filter(i => i.status === 'in_progress').length : 0;
  const completedInterviews = Array.isArray(interviews) ? (interviews as { status: string }[]).filter(i => i.status === 'finished').length : 0;
  const activePositions = Array.isArray(positions) ? (positions as { status: string }[]).filter(p => p.status === 'active').length : 0;
  const candidatesCount = Array.isArray(candidates) ? candidates.length : 0;

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const chartData = {
    interviews: [12, 19, 15, 25, 22, 30, 28],
    candidates: [8, 12, 15, 18, 22, 25, 30],
    positions: [5, 7, 6, 8, 10, 9, 12]
  };

  return (
    <BaseWidget
      id={id}
      isSelected={isSelected}
      onClick={onClick}
      onClose={onClose}
      onRefresh={handleRefresh}
      onMouseDown={onMouseDown}
      title="–î–∞—à–±–æ—Ä–¥"
      loading={loading}
      error={error}
      className="min-w-[700px] min-h-[500px]"
    >
      <div className="space-y-4">
        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="grid grid-cols-4 gap-3">
          <CompactMetric
            title="–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
            value={activePositions}
            icon="üíº"
            color="blue"
            trend="up"
            trendValue={12}
          />
          <CompactMetric
            title="–ò–Ω—Ç–µ—Ä–≤—å—é —Å–µ–≥–æ–¥–Ω—è"
            value={activeInterviews}
            icon="üé§"
            color="green"
            trend="up"
            trendValue={8}
          />
          <CompactMetric
            title="–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"
            value={candidatesCount}
            icon="üë§"
            color="purple"
            trend="up"
            trendValue={15}
          />
          <CompactMetric
            title="–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            value={completedInterviews}
            icon="‚úÖ"
            color="orange"
            trend="neutral"
          />
        </div>

        {/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ */}
        <div className="grid grid-cols-3 gap-3">
          <div className="bg-white border border-gray-200 rounded-lg p-3">
            <div className="text-sm font-medium text-gray-700 mb-2">–ò–Ω—Ç–µ—Ä–≤—å—é</div>
            <CompactChart data={chartData.interviews} color="blue" />
          </div>
          <div className="bg-white border border-gray-200 rounded-lg p-3">
            <div className="text-sm font-medium text-gray-700 mb-2">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</div>
            <CompactChart data={chartData.candidates} color="green" />
          </div>
          <div className="bg-white border border-gray-200 rounded-lg p-3">
            <div className="text-sm font-medium text-gray-700 mb-2">–í–∞–∫–∞–Ω—Å–∏–∏</div>
            <CompactChart data={chartData.positions} color="purple" />
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        <div className="bg-white border border-gray-200 rounded-lg p-3">
          <div className="text-sm font-medium text-gray-700 mb-3">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
          <div className="space-y-2 max-h-32 overflow-y-auto">
            {recentActivity.map((activity, index) => (
              <CompactActivity key={index} activity={activity} />
            ))}
          </div>
        </div>
      </div>
    </BaseWidget>
  );
};

export default DashboardWidget; 