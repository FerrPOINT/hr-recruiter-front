import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import VoiceInterviewService, { VoiceQuestion } from '../services/voiceInterviewService';
import { useAuthStore } from '../store/authStore';
import ElevenLabsConversation from '../components/ElevenLabsConversation';

interface ElabsSessionProps {
  useProxy?: boolean;
  backendUrl?: string;
  apiKey?: string;
}

const ElabsSession: React.FC<ElabsSessionProps> = ({ 
  useProxy = true, 
  backendUrl = 'http://localhost:8080',
  apiKey 
}) => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const interviewId = parseInt(sessionId || '0');
  const navigate = useNavigate();
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [interviewData, setInterviewData] = useState<any>(null);
  const [agentId, setAgentId] = useState<string>('');
  const [messages, setMessages] = useState<Array<{text: string, isUser: boolean}>>([]);
  const [isConnected, setIsConnected] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState<VoiceQuestion | null>(null);
  
  // –†–µ—Ñ—ã
  const sessionInitialized = useRef(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (!interviewId || interviewId === 0) {
      setError('ID –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ —É–∫–∞–∑–∞–Ω');
      setIsLoading(false);
      return;
    }

    const initializeSession = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const token = useAuthStore.getState().token;
        if (!token) {
          setError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          setIsLoading(false);
          return;
        }

        console.log(`üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewId}...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (—Å–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
        const startResponse = await VoiceInterviewService.startInterview(interviewId, {
          voiceMode: true,
          autoCreateAgent: true
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        setInterviewData(startResponse);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω—ã:', startResponse);
        
        const { agentId: newAgentId } = startResponse;
        setAgentId(newAgentId);
        console.log('‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ:', newAgentId);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
        setIsConnected(true);
        sessionInitialized.current = true;
        
      } catch (err: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:', err);
        setError(err.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é');
      } finally {
        setIsLoading(false);
      }
    };

    initializeSession();
  }, [interviewId]);

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
  const handleFinishInterview = async () => {
    try {
      await VoiceInterviewService.finishInterview(interviewId);
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      navigate('/admin/interviews');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
          <div className="text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 className="text-xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <button
              onClick={() => navigate('/')}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
          <div className="text-center">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
            </div>
            <h2 className="text-xl font-bold text-gray-900 mb-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é</h2>
            <p className="text-gray-600">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
          </h1>
          {interviewData?.position?.title && (
            <p className="text-lg text-gray-600">
              –í–∞–∫–∞–Ω—Å–∏—è: {interviewData.position.title}
            </p>
          )}
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è */}
        <ElevenLabsConversation
          agentId={agentId}
          voiceId="pNInz6obpgDQGcFmaJgB"
          isConnected={isConnected}
          onMessage={async (message) => {
            console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞:', message);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            setMessages(prev => [...prev, { text: message, isUser: false }]);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ElevenLabs
            // –ü–æ–∫–∞ —á—Ç–æ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (message && typeof message === 'string' && message.trim()) {
              try {
                // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
                if (!currentQuestion) {
                  const question = await VoiceInterviewService.getNextQuestion(interviewId);
                  setCurrentQuestion(question);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º questionId
                await VoiceInterviewService.saveVoiceAnswer(interviewId, currentQuestion?.questionId || 1, {
                  text: message,
                  durationMs: 0, // TODO: –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                  confidence: 0.95, // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                  timestamp: new Date().toISOString(),
                  type: 'USER_ANSWER'
                });
                
                console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                setCurrentQuestion(null);
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
              }
            }
          }}
          onError={(error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', error);
            setError(error);
          }}
          onSessionEnd={async () => {
            console.log('üîö –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            try {
              await VoiceInterviewService.endVoiceSession(interviewId);
              console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', error);
            }
            handleFinishInterview();
          }}
          onAgentStart={() => {
            console.log('ü§ñ –ê–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
          }}
          onAgentEnd={() => {
            console.log('ü§ñ –ê–≥–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
          }}
          onUserStart={() => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
          }}
          onUserEnd={() => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å');
          }}
          onStart={() => {
            console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å');
          }}
          onEnd={() => {
            console.log('üîö –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å');
          }}
        />

        {/* –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {messages.length > 0 && (
          <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</h3>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.isUser
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-900'
                    }`}
                  >
                    <p className="text-sm">{message.text}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="mt-8 flex justify-center space-x-4">
          <button
            onClick={handleFinishInterview}
            className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
          >
            –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
          </button>
        </div>
      </div>
    </div>
  );
};

export default ElabsSession; 