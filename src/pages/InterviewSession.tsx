import React, { useState, useEffect, useRef } from 'react';
import { Mic, Send, Loader2, CheckCircle, Mail, Globe, Users, Info, Headphones } from 'lucide-react';

// –ú–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
const MOCK_QUESTIONS = [
  '–ö–∞–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ Go?',
  '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–Ω–∞–ª—ã –≤ Go –∏ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç?',
  '–ö–∞–∫ –≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—à–∏–±–∫–∏ –≤ Go?',
  '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Go. –ö–∞–∫–∏–µ –±—ã–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏?',
  '–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–¥–∞—á?'
];

// –ú–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
const INTRO_MESSAGES = [
  { from: 'ai', text: '–ü—Ä–∏–≤–µ—Ç üëã' },
  { from: 'ai', text: '–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä.' },
  { from: 'ai', text: '–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–∫—Ä–æ—Ñ–æ–Ω. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.' },
  { from: 'ai', text: '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω.' },
];

const MIC_TEST_DURATION = 5; // —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

// –ú–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const INVITE = {
  candidate: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ñ—É–∫–æ–≤',
  company: 'azhukov',
  position: 'Go —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
  language: '–†—É—Å—Å–∫–∏–π',
  questions: 5,
};

const CHECKLIST = [
  { icon: <Globe className="h-6 w-6 text-orange-500" />, text: '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ Chrome –∏–ª–∏ Edge' },
  { icon: <Headphones className="h-6 w-6 text-orange-500" />, text: '–í–∞—à–∏ –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç' },
  { icon: <Mic className="h-4 w-4 text-orange-500" />, text: '–í–∞—à –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç' },
  { icon: <Info className="h-6 w-6 text-orange-500" />, text: '–í—ã –≤ —Ç–∏—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤—ã —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏' },
];

const InterviewSession: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
  const [messages, setMessages] = useState<{from: string, text: string}[]>([]);
  const [step, setStep] = useState<'intro' | 'mic-test' | 'mic-test-done' | 'question' | 'final'>('intro');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [isTranscribing, setIsTranscribing] = useState(false);
  const [userAudio, setUserAudio] = useState<string | null>(null); // base64 –∏–ª–∏ blob, –º–æ–∫
  const [userText, setUserText] = useState('');
  const [introDone, setIntroDone] = useState(false);
  const [recordTimer, setRecordTimer] = useState(0);
  const recordDuration = 30; // —Å–µ–∫—É–Ω–¥
  const chatEndRef = useRef<HTMLDivElement | null>(null);
  const [showInvite, setShowInvite] = useState(true);
  const [consent, setConsent] = useState(false);
  const [showFinalBlock, setShowFinalBlock] = useState(false);

  // Sleep-—Ñ—É–Ω–∫—Ü–∏—è
  function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º
  async function pushMessagesWithDelay(msgsArr: {from: string, text: string}[]) {
    for (const msg of msgsArr) {
      setMessages(msgs => [...msgs, msg]);
      await sleep(2000);
    }
  }

  // –ó–∞–ø—É—Å–∫ intro-—Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å"
  const startIntro = () => {
    setStep('intro');
    setMessages([]);
    setIntroDone(false);
    let cancelled = false;
    (async () => {
      for (let i = 0; i < INTRO_MESSAGES.length; i++) {
        if (cancelled) break;
        setMessages(msgs => [...msgs, INTRO_MESSAGES[i]]);
        await sleep(2000);
      }
      if (!cancelled) setIntroDone(true);
    })();
    return () => { cancelled = true; };
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // –°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
  useEffect(() => {
    if (showFinalBlock && chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [showFinalBlock]);

  // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è mic-test –∏ question)
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isRecording && recordTimer > 0) {
      timer = setTimeout(() => setRecordTimer(t => t - 1), 1000);
    } else if (isRecording && recordTimer === 0) {
      if (step === 'mic-test') {
        handleStopMicTest();
      } else {
        handleStopRecording();
      }
    }
    return () => clearTimeout(timer);
  }, [isRecording, recordTimer, step]);

  // –ú–æ–∫: —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å)
  const handleMicTest = () => {
    setStep('mic-test');
    setIsRecording(true);
    setRecordTimer(MIC_TEST_DURATION);
    setUserAudio(null);
    setUserText('');
  };
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const handleStopMicTest = () => {
    setIsRecording(false);
    (async () => {
      await sleep(500);
      await pushMessagesWithDelay([
        { from: 'user', text: '–†–∞–∑-—Ä–∞–∑. –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.' },
        { from: 'ai', text: '–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! –Ø —Å–ª—ã—à—É —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ. –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é.' },
        { from: 'ai', text: '–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π, –Ω–∞–∂–∏–º–∞–π ¬´–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç¬ª, –≥–æ–≤–æ—Ä–∏, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π.' }
      ]);
      setStep('mic-test-done');
    })();
  };

  // –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
  const handleStartInterview = () => {
    setStep('question');
    (async () => {
      await pushMessagesWithDelay([
        { from: 'ai', text: `–í–æ–ø—Ä–æ—Å 1 –∏–∑ ${MOCK_QUESTIONS.length}: ${MOCK_QUESTIONS[0]}` }
      ]);
    })();
  };

  // –ú–æ–∫: –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
  const handleStartRecording = () => {
    setIsRecording(true);
    setUserAudio(null);
    setUserText('');
    setRecordTimer(recordDuration);
  };
  // –ú–æ–∫: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
  const handleStopRecording = () => {
    setIsRecording(false);
    setIsTranscribing(true);
    setRecordTimer(0);
    // –ú–æ–∫: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
    setTimeout(() => {
      setIsTranscribing(false);
      setUserText('–ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...');
      (async () => {
        await pushMessagesWithDelay([
          { from: 'user', text: '–ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...' },
          { from: 'ai', text: '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.' }
        ]);
        // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–Ω–∞–ª
        if (currentQuestion + 1 < MOCK_QUESTIONS.length) {
          setCurrentQuestion(q => q + 1);
          await pushMessagesWithDelay([
            { from: 'ai', text: `–í–æ–ø—Ä–æ—Å ${currentQuestion + 2} –∏–∑ ${MOCK_QUESTIONS.length}: ${MOCK_QUESTIONS[currentQuestion + 1]}` }
          ]);
        } else {
          setStep('final');
          await pushMessagesWithDelay([
            { from: 'ai', text: '–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.' }
          ]);
          setShowFinalBlock(true);
        }
      })();
    }, 1500);
  };

  // –ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ
  const currentQuestionText = `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${MOCK_QUESTIONS.length}: ${MOCK_QUESTIONS[currentQuestion]}`;
  const lastMessage = messages[messages.length - 1];
  const canRecordAnswer = step === 'question'
    && lastMessage && lastMessage.from === 'ai' && lastMessage.text === currentQuestionText
    && !isRecording && !isTranscribing;

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-[#f0f3ff] to-[#e6eaff] py-4">
      {/* –§–∏—Ä–º–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –∏ –ø–æ–º–æ—â—å */}
      <div className="w-full max-w-2xl flex items-center justify-between px-2 sm:px-4 pt-2 pb-1 mb-2">
        <div className="text-2xl font-extrabold tracking-tight" style={{color: 'var(--wmt-orange)'}}>
          WMT –†–µ–∫—Ä—É—Ç–µ—Ä
        </div>
        <a href="#" className="text-[color:var(--wmt-orange)] hover:underline text-sm font-medium">–ü–æ–º–æ—â—å</a>
      </div>
      {/* –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω-–∏–Ω–≤–∞–π—Ç */}
      {showInvite ? (
        <div className="w-full max-w-2xl bg-white rounded-xl shadow-soft flex flex-col md:flex-row overflow-hidden">
          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ */}
          <div className="flex-1 p-8 flex flex-col justify-center gap-4 min-w-[320px]">
            <div className="text-gray-700 text-base mb-1">–ü—Ä–∏–≤–µ—Ç, <b>{INVITE.candidate}</b></div>
            <div className="text-gray-900 text-lg font-semibold">azhukov –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:</div>
            <div className="text-2xl font-extrabold" style={{color: 'var(--wmt-orange-dark)'}}>{INVITE.position}</div>
            <div className="flex flex-col gap-1 text-gray-600 text-sm mb-2">
              <div className="flex items-center gap-2"><Users className="h-4 w-4" /> –ö–æ–º–ø–∞–Ω–∏—è: <b>{INVITE.company}</b></div>
              <div className="flex items-center gap-2"><Globe className="h-4 w-4" /> –Ø–∑—ã–∫: <b>{INVITE.language}</b></div>
              <div className="flex items-center gap-2"><CheckCircle className="h-4 w-4" /> –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{INVITE.questions}</b></div>
            </div>
            <label className="flex items-center gap-2 text-xs text-gray-500 mt-2">
              <input type="checkbox" checked={consent} onChange={e => setConsent(e.target.checked)} className="accent-[color:var(--wmt-orange)]" />
              –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞—é <a href="#" className="text-[color:var(--wmt-orange)] hover:underline">–ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
            </label>
            <button
              className="btn-primary w-full h-12 min-h-[48px] mt-4"
              disabled={!consent}
              style={{ opacity: consent ? 1 : 0.6 }}
              onClick={() => {
                setShowInvite(false);
                startIntro();
              }}
            >
              –ù–∞—á–∞—Ç—å
            </button>
          </div>
          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî —á–µ–∫-–ª–∏—Å—Ç */}
          <div className="flex-1 bg-[#f7f8fa] p-8 flex flex-col justify-center gap-4 min-w-[320px] border-t md:border-t-0 md:border-l border-gray-200">
            <div className="text-lg font-bold text-gray-900 mb-2 text-center md:text-left">–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º</div>
            <div className="text-gray-600 text-sm mb-4 text-center md:text-left">–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:</div>
            <div className="grid grid-cols-1 gap-3">
              {CHECKLIST.map((item, idx) => (
                <div key={idx} className="flex items-center gap-3 bg-white rounded-lg shadow-sm px-4 py-3">
                  {item.icon}
                  <span className="text-gray-700 text-sm">{item.text}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <div className="w-full max-w-2xl bg-white rounded-xl shadow-soft p-0 flex flex-col h-[90vh] max-h-[900px]">
          {/* –ß–∞—Ç */}
          <div className="flex-1 flex flex-col gap-3 overflow-y-auto px-8 pt-8 pb-4">
            {messages.map((msg, idx) => (
              <div key={idx} className={`flex ${msg.from === 'ai' ? 'justify-start' : 'justify-end'}`}>
                <div className={`rounded-2xl px-4 py-2 max-w-[70%] ${msg.from === 'ai' ? 'bg-gray-100 text-gray-900' : 'bg-primary-100 text-primary-900'}`}>
                  {msg.text}
                </div>
              </div>
            ))}
            <div ref={chatEndRef} />
          </div>
          {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="px-8 pb-8 pt-4 border-t bg-white flex flex-col gap-2 min-h-[110px] justify-center">
            {/* –ù–∞–¥–ø–∏—Å—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π */}
            {step === 'intro' && introDone && (
              <div className="text-center text-gray-500 text-base mb-2">–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞?</div>
            )}
            {step === 'mic-test' && isRecording && (
              <div className="text-center text-gray-500 text-base mb-2">–ò–¥—ë—Ç —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...</div>
            )}
            {step === 'mic-test-done' && (
              <div className="text-center text-gray-500 text-base mb-2">–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à—ë–Ω</div>
            )}
            {step === 'question' && !isRecording && !isTranscribing && (
              <div className="text-center text-gray-500 text-base mb-2">
                {canRecordAnswer ? '–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç?' : '–û–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å'}
              </div>
            )}
            {isRecording && step === 'question' && (
              <div className="text-center text-gray-500 text-base mb-2">–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ!</div>
            )}
            {isTranscribing && (
              <div className="text-center text-gray-500 text-base mb-2">–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...</div>
            )}
            {step === 'final' && showFinalBlock && (
              <div className="flex flex-col items-center gap-2 w-full">
                <CheckCircle className="h-8 w-8 text-green-500" />
                <div className="text-lg font-bold text-gray-900">–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!</div>
                <div className="text-gray-500 text-sm text-center max-w-xs">
                  –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.<br />
                  –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ—Ç–±–æ—Ä–µ!
                </div>
                <div className="text-gray-400 text-xs mt-2">–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</div>
              </div>
            )}
            {step === 'intro' && introDone && (
              <button className="btn-primary w-full h-12 min-h-[48px]" onClick={handleMicTest}>–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</button>
            )}
            {step === 'mic-test' && isRecording && (
              <button className="w-full h-12 min-h-[48px] flex items-center justify-center gap-2 rounded-lg text-base font-medium transition-colors duration-200 bg-red-500 hover:bg-red-600 text-white px-4 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2" style={{maxWidth:'100%'}} onClick={handleStopMicTest}>
                <Send className="h-5 w-5 mr-2" /> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç
                <span className="ml-2 text-sm font-mono bg-gray-200 text-gray-700 rounded px-2 py-0.5 min-w-[36px] text-center">{recordTimer}s</span>
              </button>
            )}
            {step === 'mic-test-done' && (
              <button className="btn-primary w-full h-12 min-h-[48px]" onClick={handleStartInterview}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            )}
            {canRecordAnswer && (
              <button
                className="w-full h-12 min-h-[48px] flex items-center justify-center gap-2 rounded-lg text-base font-medium transition-colors duration-200 bg-green-500 hover:bg-green-600 text-white px-4"
                style={{maxWidth:'100%'}} onClick={handleStartRecording}
              >
                <Mic className="h-5 w-5 mr-2" /> –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
              </button>
            )}
            {isRecording && step === 'question' && (
              <button className="w-full h-12 min-h-[48px] flex items-center justify-center gap-2 rounded-lg text-base font-medium transition-colors duration-200 bg-red-500 hover:bg-red-600 text-white px-4 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2" style={{maxWidth:'100%'}} onClick={handleStopRecording}>
                <Send className="h-5 w-5 mr-2" /> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                <span className="ml-2 text-sm font-mono bg-gray-200 text-gray-700 rounded px-2 py-0.5 min-w-[36px] text-center">{recordTimer}s</span>
              </button>
            )}
            {isTranscribing && (
              <button className="w-full h-12 min-h-[48px] flex items-center justify-center gap-2 rounded-lg text-base font-medium transition-colors duration-200 bg-primary-200 text-primary-900 px-4 cursor-not-allowed" style={{maxWidth:'100%'}} disabled>
                <Loader2 className="animate-spin h-6 w-6" style={{color: 'var(--wmt-orange)'}} /> –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default InterviewSession; 