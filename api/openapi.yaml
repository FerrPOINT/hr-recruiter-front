openapi: 3.0.0
info:
  title: HR Recruiter API
  version: 1.0.0
  description: |
    Полная OpenAPI спецификация для платформы автоматизации.
    Включает все основные сущности, бизнес-операции, заглушки для AI и медиа, а также примеры для быстрой интеграции.
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: https://api.hr-recruiter.com/api/v1
    description: Production server

tags:
  - name: Auth
    description: Аутентификация и управление сессиями
  - name: Account
    description: Управление аккаунтом текущего пользователя
  - name: Positions
    description: Управление вакансиями
  - name: Candidates
    description: Управление кандидатами
  - name: Interviews
    description: Управление собеседованиями
  - name: Questions
    description: Управление вопросами для собеседований
  - name: Team & Users
    description: Управление командой и пользователями
  - name: Settings
    description: Настройки системы (тарифы, брендинг)
  - name: Analytics & Reports
    description: Статистика и отчеты
  - name: AI
    description: Взаимодействие с AI-ассистентом

paths:
  /auth/login:
    post:
      operationId: login
      tags:
        - Auth
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      operationId: logout
      tags:
        - Auth
      summary: Выход пользователя
      responses:
        '204':
          description: Успешный выход

  /account:
    get:
      operationId: getAccount
      tags:
        - Account
      summary: Получить профиль текущего пользователя
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateAccount
      tags:
        - Account
      summary: Обновить профиль текущего пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Профиль обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /positions:
    get:
      operationId: listPositions
      tags:
        - Positions
      summary: Получить список вакансий
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/PositionStatusEnum'
          description: Фильтр по статусу
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по названию
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionsPaginatedResponse'
    post:
      operationId: createPosition
      tags:
        - Positions
      summary: Создать новую вакансию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionCreateRequest'
      responses:
        '201':
          description: Вакансия создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'

  /positions/{id}:
    get:
      operationId: getPosition
      tags:
        - Positions
      summary: Получить вакансию по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
    put:
      operationId: updatePosition
      tags:
        - Positions
      summary: Обновить вакансию по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionUpdateRequest'
      responses:
        '200':
          description: Вакансия обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
    patch:
      operationId: partialUpdatePosition
      tags:
        - Positions
      summary: Частично обновить вакансию (для архивации)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/PositionStatusEnum'
                  description: Новый статус вакансии
      responses:
        '200':
          description: Вакансия обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'

  /positions/{id}/public-link:
    get:
      operationId: getPositionPublicLink
      tags:
        - Positions
      summary: Получить публичную ссылку на вакансию
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicLink:
                    type: string

  /positions/{id}/stats:
    get:
      operationId: getPositionStats
      tags:
        - Positions
      summary: Получить статистику по вакансии
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionStats'

  /positions/{positionId}/questions:
    get:
      operationId: listPositionQuestions
      tags:
        - Questions
      summary: Список вопросов по вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Question'
    post:
      operationId: createPositionQuestion
      tags:
        - Questions
      summary: Добавить вопрос к вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateRequest'
      responses:
        '201':
          description: Вопрос добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /positions/{positionId}/questions-with-settings:
    get:
      operationId: getPositionQuestionsWithSettings
      tags:
        - Questions
      summary: Получить вопросы с настройками проведения собеседования
      description: Возвращает список вопросов для вакансии вместе с настройками проведения собеседования (время ответа, язык, сохранение аудио/видео и т.д.)
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
          description: ID вакансии
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionQuestionsResponse'
        '404':
          description: Вакансия не найдена

  /questions:
    get:
      operationId: getAllQuestions
      tags:
        - Questions
      summary: Получить список всех вопросов
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Номер страницы
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: "createdAt"
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionsPaginatedResponse'

  /questions/{id}:
    get:
      operationId: getQuestion
      tags:
        - Questions
      summary: Получить вопрос по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Вопрос не найден
    put:
      operationId: updateQuestion
      tags:
        - Questions
      summary: Обновить вопрос
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdateRequest'
      responses:
        '200':
          description: Вопрос обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      operationId: deleteQuestion
      tags:
        - Questions
      summary: Удалить вопрос по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Вопрос успешно удален

  /positions/{positionId}/candidates:
    get:
      operationId: listPositionCandidates
      tags:
        - Candidates
      summary: Список кандидатов по вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    post:
      operationId: createPositionCandidate
      tags:
        - Candidates
      summary: Добавить кандидата к вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateRequest'
      responses:
        '201':
          description: Кандидат добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'

  /candidates/{id}:
    get:
      operationId: getCandidate
      tags:
        - Candidates
      summary: Получить кандидата
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    put:
      operationId: updateCandidate
      tags:
        - Candidates
      summary: Обновить кандидата
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdateRequest'
      responses:
        '200':
          description: Кандидат обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    delete:
      operationId: deleteCandidate
      tags:
        - Candidates
      summary: Удалить кандидата по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Кандидат успешно удален

  /candidates/{candidateId}/interview:
    post:
      operationId: createInterviewFromCandidate
      tags:
        - Interviews
      summary: Создать и начать интервью
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'

  /positions/{positionId}/interviews:
    get:
      operationId: listPositionInterviews
      tags:
        - Interviews
      summary: Список собеседований по вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interview'

  /interviews:
    get:
      operationId: listInterviews
      tags:
        - Interviews
      summary: Получить список всех собеседований
      description: Возвращает список всех собеседований в системе.
      parameters:
        - in: query
          name: positionId
          schema:
            type: integer
            format: int64
          description: Фильтр по ID вакансии
        - in: query
          name: candidateId
          schema:
            type: integer
            format: int64
          description: Фильтр по ID кандидата
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: Список собеседований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewsPaginatedResponse'

  /interviews/{id}:
    get:
      operationId: getInterview
      tags:
        - Interviews
      summary: Получить информацию о собеседовании и собеседнике
      description: |
        Возвращает информацию о собеседовании включая:
        - Информацию о кандидате
        - Информацию о вакансии
        - Список вопросов
        - Статус собеседования
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о собеседовании
          content:
            application/json:
              schema:
                type: object
                properties:
                  interview:
                    $ref: '#/components/schemas/Interview'
                  candidate:
                    $ref: '#/components/schemas/Candidate'
                  position:
                    $ref: '#/components/schemas/Position'
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '404':
          description: Собеседование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /interviews/{id}/answer:
    post:
      operationId: submitInterviewAnswer
      tags:
        - Interviews
      summary: Отправить ответ на вопрос
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewAnswerCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'

  /branding:
    get:
      operationId: getBranding
      tags:
        - Settings
      summary: Получить настройки брендинга
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'
    put:
      operationId: updateBranding
      tags:
        - Settings
      summary: Обновить настройки брендинга
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandingUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'

  /users:
    get:
      operationId: listUsers
      tags:
        - Team & Users
      summary: Список пользователей
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginatedResponse'
    post:
      operationId: createUser
      tags:
        - Team & Users
      summary: Создать пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      operationId: getUser
      tags:
        - Team & Users
      summary: Получить пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      tags:
        - Team & Users
      summary: Обновить пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      tags:
        - Team & Users
      summary: Удалить пользователя по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Пользователь успешно удален

  /tariffs:
    get:
      operationId: listTariffs
      tags:
        - Settings
      summary: Список тарифов
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
    post:
      operationId: createTariff
      tags:
        - Settings
      summary: Создать тариф
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffCreateRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'

  /tariffs/{id}:
    get:
      operationId: getTariff
      tags:
        - Settings
      summary: Получить тариф
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
    put:
      operationId: updateTariff
      tags:
        - Settings
      summary: Обновить тариф
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
    delete:
      operationId: deleteTariff
      tags:
        - Settings
      summary: Удалить тариф по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Тариф успешно удален

  /reports:
    get:
      operationId: getReports
      tags:
        - Analytics & Reports
      summary: Получить отчеты по собеседованиям
      description: Генерирует и возвращает отчеты, сгруппированные по месяцам.
      responses:
        '200':
          description: Успешный ответ с отчетами
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthlyReport'

  /ai/transcribe:
    post:
      operationId: transcribeAudio
      tags:
        - AI
      summary: Транскрибировать аудио файл
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Аудио файл для транскрибации
      responses:
        '200':
          description: Аудио успешно транскрибировано
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript:
                    type: string
                    description: Транскрибированный текст

  /ai/generate-questions:
    post:
      operationId: generateQuestions
      tags:
        - AI
      summary: Генерировать вопросы для собеседования
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateQuestionsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '500':
          description: Internal Server Error

  /ai/generate-position:
    post:
      operationId: generatePosition
      tags:
        - AI
      summary: Генерировать вакансию с помощью AI
      description: |
        Генерирует структуру вакансии на основе описания пользователя.
        AI возвращает минимальный набор полей (title, description, topics, level, questions).
        Остальные поля (status, language, settings и т.д.) устанавливаются системой по умолчанию.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionAiGenerationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionAiGenerationResponse'
        '400':
          description: Bad Request - некорректные входные данные
        '500':
          description: Internal Server Error - ошибка AI или системы

  /stats/positions:
    get:
      operationId: getPositionsStats
      tags:
        - Analytics & Reports
      summary: Статистика по вакансиям
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PositionStats'

  /stats/candidates:
    get:
      operationId: getCandidatesStats
      tags:
        - Analytics & Reports
      summary: Статистика по кандидатам
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateStats'

  /stats/interviews:
    get:
      operationId: getInterviewsStats
      tags:
        - Analytics & Reports
      summary: Статистика по интервью
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewStats'

  /archive:
    get:
      summary: Архив
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /learn:
    get:
      summary: Обучающие материалы
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    url:
                      type: string
                    description:
                      type: string

  /tariff/info:
    get:
      operationId: getTariffInfo
      tags:
        - Settings
      summary: Информация о тарифе пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  interviewsLeft:
                    type: integer
                  until:
                    type: string

  /team:
    get:
      operationId: getTeam
      tags:
        - Team & Users
      summary: Получить информацию о команде
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /user/info:
    get:
      operationId: getUserInfo
      tags:
        - Account
      summary: Получить дополнительную информацию о пользователе
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string

  /ai/generate-position-data:
    post:
      operationId: generatePositionData
      tags:
        - AI
      summary: Сгенерировать данные для вакансии на основе описания
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionDataGenerationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDataGenerationResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка генерации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checklist:
    get:
      operationId: getChecklist
      tags:
        - Interviews
      summary: Чек-лист для интервью
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    text:
                      type: string

  /invite/info:
    get:
      operationId: getInviteInfo
      tags:
        - Interviews
      summary: Информация для приглашения
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  language:
                    type: string
                  questionsCount:
                    type: integer

  /ai/transcribe-answer:
    post:
      operationId: transcribeAnswerWithAI
      tags:
        - AI
      summary: Транскрибировать и отформатировать аудио ответ на интервью
      description: |
        Обрабатывает аудио файл через пайплайн:
        1. Whisper - транскрибация в сырой текст
        2. Claude - форматирование текста (без добавления контента)
        3. Сохранение результата в базу данных

        Сохраняет как сырой, так и отформатированный текст.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audioFile
                - interviewId
                - questionId
              properties:
                audioFile:
                  type: string
                  format: binary
                  description: Аудио файл для транскрибации
                interviewId:
                  type: integer
                  format: int64
                  description: ID интервью (определяет кандидата и позицию)
                questionId:
                  type: integer
                  format: int64
                  description: ID вопроса для создания ответа
      responses:
        '200':
          description: Аудио успешно обработано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscribeAnswerWithAI200Response'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Audio file is empty"
        '404':
          description: Интервью или вопрос не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Interview or question not found"
        '503':
          description: Сервисы транскрибации недоступны
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transcription services are not available"

  /candidates:
    get:
      operationId: listCandidates
      tags:
        - Candidates
      summary: Получить список всех кандидатов
      parameters:
        - in: query
          name: positionId
          schema:
            type: integer
            format: int64
          description: Фильтр по ID вакансии
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по имени или email
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatesPaginatedResponse'

components:
  schemas:
    # Базовые компоненты
    BaseEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, createdAt]
    
    # Общий класс для пагинированных ответов
    PaginatedResponse:
      type: object
      description: "Базовый класс для всех пагинированных ответов"
      properties:
        content:
          type: array
          description: "Список элементов на текущей странице"
          items:
            type: object
        totalElements:
          type: integer
          format: int64
          description: "Общее количество элементов"
          example: 150
        totalPages:
          type: integer
          format: int64
          description: "Общее количество страниц"
          example: 15
        number:
          type: integer
          format: int64
          description: "Номер текущей страницы (начиная с 0)"
          example: 0
        size:
          type: integer
          format: int64
          description: "Размер страницы"
          example: 10
      required: [content, totalElements, totalPages, number, size]
    
    # Пагинированные ответы для разных сущностей
    QuestionsPaginatedResponse:
      $ref: '#/components/schemas/PaginatedResponse'
      description: "Пагинированный список вопросов"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Question'

    PositionsPaginatedResponse:
      $ref: '#/components/schemas/PaginatedResponse'
      description: "Пагинированный список позиций"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Position'

    UsersPaginatedResponse:
      $ref: '#/components/schemas/PaginatedResponse'
      description: "Пагинированный список пользователей"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'

    CandidatesPaginatedResponse:
      $ref: '#/components/schemas/PaginatedResponse'
      description: "Пагинированный список кандидатов"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'

    InterviewsPaginatedResponse:
      $ref: '#/components/schemas/PaginatedResponse'
      description: "Пагинированный список интервью"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Interview'
    
    BasePositionFields:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/PositionStatusEnum'
        topics:
          type: array
          items:
            type: string
          description: "Ключевые темы/теги позиции"
        minScore:
          type: number
          format: float
          description: "Минимальный проходной балл"
        language:
          type: string
          description: "Язык собеседования"
          example: "Русский"
        showOtherLang:
          type: boolean
          description: "Показывать результаты на другом языке"
        tags:
          type: array
          items:
            type: string
          description: "Теги для поиска"
        answerTime:
          type: integer
          description: "Время на ответ в секундах"
          example: 150
        level:
          $ref: '#/components/schemas/PositionLevelEnum'
        saveAudio:
          type: boolean
          description: "Сохранять аудио"
        saveVideo:
          type: boolean
          description: "Сохранять видео"
        randomOrder:
          type: boolean
          description: "Случайный порядок вопросов"
        questionType:
          type: string
          description: "Тип вопросов"
          example: "В основном хард-скиллы"
        questionsCount:
          type: integer
          description: "Количество вопросов"
          example: 5
        checkType:
          type: string
          description: "Тип проверки"
    
    BaseQuestionFields:
      type: object
      properties:
        text:
          type: string
        type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
        isRequired:
          type: boolean
        evaluationCriteria:
          type: string
          description: "Критерии оценки ответа"
    
    BaseCandidateFields:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
    
    BaseUserFields:
      type: object
      properties:
        firstName:
          type: string
          description: "Имя пользователя"
        lastName:
          type: string
          description: "Фамилия пользователя"
        email:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        avatarUrl:
          type: string
        language:
          type: string
        phone:
          type: string
    
    # Основные схемы
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    
    User:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BaseUserFields'
      required: [id, firstName, lastName, email, role, createdAt]
    
    UserCreateRequest:
      type: object
      properties:
        firstName:
          type: string
          description: "Имя пользователя"
        lastName:
          type: string
          description: "Фамилия пользователя"
        email:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        avatarUrl:
          type: string
        language:
          type: string
        phone:
          type: string
        password:
          type: string
      required: [firstName, lastName, email, role, password]
    
    UserUpdateRequest:
      $ref: '#/components/schemas/BaseUserFields'
    
    Position:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BasePositionFields'
        - type: object
          properties:
            company:
              type: string
            publicLink:
              type: string
            stats:
              $ref: '#/components/schemas/PositionStats'
            team:
              type: array
              items:
                $ref: '#/components/schemas/User'
            branding:
              $ref: '#/components/schemas/Branding'
            candidates:
              type: array
              items:
                $ref: '#/components/schemas/Candidate'
            avgScore:
              type: number
              format: float
              description: "Средний балл по позиции"
          required: [id, title, company, status, createdAt]
    
    PositionCreateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/PositionStatusEnum'
        topics:
          type: array
          items:
            type: string
        minScore:
          type: number
          format: float
        language:
          type: string
        showOtherLang:
          type: boolean
        tags:
          type: array
          items:
            type: string
        answerTime:
          type: integer
        level:
          $ref: '#/components/schemas/PositionLevelEnum'
        saveAudio:
          type: boolean
        saveVideo:
          type: boolean
        randomOrder:
          type: boolean
        questionType:
          type: string
        questionsCount:
          type: integer
        checkType:
          type: string
        team:
          type: array
          items:
            type: string
        brandingId:
          type: string
      required: [title, status]
    
    PositionUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/PositionStatusEnum'
        topics:
          type: array
          items:
            type: string
        minScore:
          type: number
          format: float
        language:
          type: string
        showOtherLang:
          type: boolean
        tags:
          type: array
          items:
            type: string
        answerTime:
          type: integer
        level:
          $ref: '#/components/schemas/PositionLevelEnum'
        saveAudio:
          type: boolean
        saveVideo:
          type: boolean
        randomOrder:
          type: boolean
        questionType:
          type: string
        questionsCount:
          type: integer
        checkType:
          type: string
        team:
          type: array
          items:
            type: string
        brandingId:
          type: string
    
    PositionStats:
      type: object
      properties:
        positionId:
          type: integer
        interviewsTotal:
          type: integer
          description: "Всего собеседований"
        interviewsSuccessful:
          type: integer
          description: "Успешно завершенные"
        interviewsInProgress:
          type: integer
          description: "В процессе"
        interviewsUnsuccessful:
          type: integer
          description: "Неуспешно завершенные"
    
    Question:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BaseQuestionFields'
        - type: object
          properties:
            positionId:
              type: integer
          required: [id, positionId, text, type, order, createdAt]
    
    QuestionCreateRequest:
      type: object
      properties:
        text:
          type: string
        type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
        isRequired:
          type: boolean
        evaluationCriteria:
          type: string
      required: [text, type, order]
    
    QuestionUpdateRequest:
      $ref: '#/components/schemas/BaseQuestionFields'
    
    Candidate:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BaseCandidateFields'
        - type: object
          properties:
            interview:
              $ref: '#/components/schemas/Interview'
            positionId:
              type: integer
          required: [id, firstName, lastName, status, positionId, createdAt]
    
    CandidateCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
      required: [firstName, lastName]
    
    CandidateUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
    
    Interview:
      type: object
      properties:
        id:
          type: integer
        candidateId:
          type: integer
        positionId:
          type: integer
        status:
          $ref: '#/components/schemas/InterviewStatusEnum'
        result:
          $ref: '#/components/schemas/InterviewResultEnum'
        createdAt:
          type: string
          format: date-time
          description: "Дата создания собеседования"
        startedAt:
          type: string
          format: date-time
          description: "Дата начала собеседования"
        finishedAt:
          type: string
          format: date-time
          description: "Дата окончания собеседования"
        transcript:
          type: string
        audioUrl:
          type: string
        videoUrl:
          type: string
        aiScore:
          type: number
        answers:
          type: array
          items:
            $ref: '#/components/schemas/InterviewAnswer'
      required:
        - id
        - candidateId
        - positionId
        - status
        - createdAt
    
    InterviewAnswer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        interviewId:
          type: integer
          format: int64
        questionId:
          type: integer
          format: int64
        answerText:
          type: string
        audioUrl:
          type: string
        transcript:
          type: string
        score:
          type: number
          format: float
          description: "Оценка ответа от 0 до 100"
        scoreJustification:
          type: string
          description: "Обоснование оценки"
        createdAt:
          type: string
          format: date-time
      required: [id, interviewId, questionId]
    
    InterviewAnswerCreateRequest:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        answerText:
          type: string
        audioUrl:
          type: string
        transcript:
          type: string
      required: [questionId]
    
    InterviewTranscribeResponse:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        transcript:
          type: string
      required: [questionId, transcript]
    
    Branding:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            companyName:
              type: string
            logoUrl:
              type: string
            primaryColor:
              type: string
            secondaryColor:
              type: string
            emailSignature:
              type: string
          required: [id, companyName, createdAt]
    
    BrandingUpdateRequest:
      type: object
      properties:
        companyName:
          type: string
        logoUrl:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        emailSignature:
          type: string
    
    Tariff:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              type: string
            features:
              type: array
              items:
                type: string
            price:
              type: number
            isActive:
              type: boolean
          required: [id, name, price, createdAt]
    
    TariffCreateRequest:
      type: object
      properties:
        name:
          type: string
        features:
          type: array
          items:
            type: string
        price:
          type: number
        isActive:
          type: boolean
      required: [name, price]
    
    TariffUpdateRequest:
      type: object
      properties:
        name:
          type: string
        features:
          type: array
          items:
            type: string
        price:
          type: number
        isActive:
          type: boolean
    
    # Enums
    PositionStatusEnum:
      type: string
      enum:
        - active
        - paused
        - archived
    
    CandidateStatusEnum:
      type: string
      enum:
        - new
        - in_progress
        - finished
        - rejected
        - hired
    
    InterviewStatusEnum:
      type: string
      enum:
        - not_started
        - in_progress
        - finished
    
    InterviewResultEnum:
      type: string
      enum:
        - successful
        - unsuccessful
    
    QuestionTypeEnum:
      type: string
      enum:
        - text
        - audio
        - video
        - choice
    
    PositionLevelEnum:
      type: string
      enum:
        - junior
        - middle
        - senior
        - lead
      description: "Уровень позиции"
    
    RoleEnum:
      type: string
      enum:
        - admin
        - recruiter
        - viewer
    
    # Stats
    CandidateStats:
      type: object
      properties:
        total:
          type: integer
        inProgress:
          type: integer
        finished:
          type: integer
        hired:
          type: integer
    
    InterviewStats:
      type: object
      properties:
        total:
          type: integer
        successful:
          type: integer
        unsuccessful:
          type: integer
    
    MonthlyReport:
      type: object
      properties:
        month:
          type: string
          example: "Июль 2024"
        totalInterviews:
          type: integer
        successful:
          type: integer
        unsuccessful:
          type: integer
        avgScore:
          type: number
          format: float
        dynamics:
          type: integer
          description: "Динамика в % по сравнению с прошлым месяцем"
          example: 15

    PositionDataGenerationRequest:
      type: object
      properties:
        description:
          type: string
          description: "Описание вакансии для генерации данных"
          example: "Нужен Java разработчик для разработки микросервисов"
        existingData:
          type: object
          description: "Существующие данные вакансии (опционально)"
          properties:
            title:
              type: string
            topics:
              type: array
              items:
                type: string
            level:
              $ref: '#/components/schemas/PositionLevelEnum'
            tags:
              type: array
              items:
                type: string
      required: [description]

    PositionDataGenerationResponse:
      type: object
      properties:
        generatedData:
          type: object
          properties:
            title:
              type: string
              description: "Сгенерированное название вакансии"
              example: "Java Backend Developer"
            topics:
              type: array
              items:
                type: string
              description: "Сгенерированные темы для собеседования"
              example: ["Java Core", "Spring Framework", "Microservices", "Database Design"]
            level:
              $ref: '#/components/schemas/PositionLevelEnum'
              description: "Предлагаемый уровень позиции"
            tags:
              type: array
              items:
                type: string
              description: "Сгенерированные теги"
              example: ["Java", "Backend", "Spring", "Microservices"]
            suggestedDescription:
              type: string
              description: "Улучшенное описание вакансии"
        confidence:
          type: number
          format: float
          description: "Уверенность в генерации (0-1)"
          example: 0.85
        message:
          type: string
          description: "Сообщение о результатах генерации"
          example: "Данные успешно сгенерированы на основе описания"

    PositionQuestionsResponse:
      type: object
      description: "Ответ с вопросами вакансии и настройками проведения собеседования"
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          description: "Список вопросов для вакансии"
        interviewSettings:
          type: object
          description: "Настройки проведения собеседования"
          properties:
            answerTime:
              type: integer
              description: "Время ответа на вопрос в секундах"
              example: 120
            language:
              type: string
              description: "Язык собеседования"
              example: "ru"
            showOtherLang:
              type: boolean
              description: "Показывать вопросы на других языках"
              example: false
            saveAudio:
              type: boolean
              description: "Сохранять аудио"
              example: true
            saveVideo:
              type: boolean
              description: "Сохранять видео"
              example: false
            randomOrder:
              type: boolean
              description: "Случайный порядок вопросов"
              example: false
            questionType:
              type: string
              description: "Тип вопросов"
              example: "mixed"
            questionsCount:
              type: integer
              description: "Количество вопросов"
              example: 10
            checkType:
              type: string
              description: "Тип проверки"
              example: "ai"
            level:
              type: string
              description: "Уровень позиции"
              example: "middle"
      required: [questions, interviewSettings]

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "Сообщение об ошибке"
          example: "Произошла ошибка при обработке запроса"
        error:
          type: string
          description: "Тип ошибки"
          example: "VALIDATION_ERROR"
        timestamp:
          type: string
          format: date-time
          description: "Время возникновения ошибки"
          example: "2024-01-15T10:30:45Z"
        path:
          type: string
          description: "Путь запроса"
          example: "/api/positions"
      required: [message, error, timestamp]

    TranscribeAnswerWithAI200Response:
      type: object
      properties:
        success:
          type: boolean
          example: true
        formattedText:
          type: string
          description: Отформатированный текст от Claude
          example: "Я работал в компании три года, занимался разработкой на Java."
        interviewAnswerId:
          type: integer
          format: int64
          description: ID ответа на интервью

    TranscribeInterviewAnswerRequest:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        audioData:
          type: string
          format: binary
          description: Аудио данные для транскрибации
      required: [questionId, audioData]

    # AI-генерация вакансии
    PositionAiGenerationRequest:
      type: object
      description: "Запрос на генерацию вакансии с помощью AI"
      properties:
        description:
          type: string
          description: "Описание вакансии от пользователя"
          example: "Нужен Java разработчик для разработки микросервисов"
        questionsCount:
          type: integer
          description: "Количество вопросов для собеседования"
          example: 5
          minimum: 1
          maximum: 20
        questionType:
          type: string
          description: "Тип вопросов (hard, soft, mixed)"
          example: "hard"
      required: [description]

    PositionAiGenerationResponse:
      type: object
      description: "Ответ AI с минимальной структурой вакансии"
      properties:
        title:
          type: string
          description: "Название вакансии"
          example: "Java Backend Developer"
        description:
          type: string
          description: "Описание вакансии"
          example: "Разработка микросервисов на Java с использованием Spring Framework"
        topics:
          type: array
          items:
            type: string
          description: "Ключевые темы/навыки для собеседования"
          example: ["Java Core", "Spring Framework", "Microservices", "Database Design"]
        level:
          type: string
          enum: [junior, middle, senior, lead]
          description: "Уровень позиции"
          example: "middle"
        questions:
          type: array
          items:
            $ref: '#/components/schemas/PositionAiQuestion'
          description: "Список вопросов для собеседования"
      required: [title, topics, level, questions]

    PositionAiQuestion:
      type: object
      description: "Вопрос для собеседования (AI-генерация)"
      properties:
        text:
          type: string
          description: "Текст вопроса"
          example: "Расскажите о принципах SOLID"
        type:
          type: string
          enum: [text, audio, choice]
          description: "Тип вопроса"
          example: "text"
        order:
          type: integer
          description: "Порядок вопроса"
          example: 1
      required: [text, type, order]

    GenerateQuestionsRequest:
      type: object
      properties:
        positionDescription:
          type: string
      required: [positionDescription]

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

security:
  - basicAuth: []

x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-languages:
    - curl
    - node
    - javascript
    - python
    - go
    - java
    - php 