openapi: 3.0.0
info:
  title: HR Recruiter API
  version: 1.0.0
  description: |
    Полная OpenAPI спецификация для платформы автоматизации.
    Включает все основные сущности, бизнес-операции, заглушки для AI и медиа, а также примеры для быстрой интеграции.
servers:
  - url: http://localhost:8080/api
    description: Local server
  - url: https://api.hr-recruiter.com/api
    description: Production server

paths:
  /auth/login:
    post:
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      summary: Выход пользователя
      responses:
        '204':
          description: Успешный выход

  /account:
    get:
      summary: Получить профиль пользователя
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Обновить профиль пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Профиль обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /positions:
    get:
      summary: Список вакансий
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, draft, archived]
          description: Фильтр по статусу
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по названию
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: size
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Position'
                  total:
                    type: integer
    post:
      summary: Создать вакансию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionCreateRequest'
      responses:
        '201':
          description: Вакансия создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'

  /positions/{id}:
    get:
      summary: Получить вакансию
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
    put:
      summary: Обновить вакансию
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionUpdateRequest'
      responses:
        '200':
          description: Вакансия обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
    delete:
      summary: Архивировать вакансию
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Вакансия архивирована

  /positions/{id}/public-link:
    get:
      summary: Получить публичную ссылку на вакансию
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicLink:
                    type: string

  /positions/{id}/stats:
    get:
      summary: Получить статистику по вакансии
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionStats'

  /positions/{positionId}/questions:
    get:
      summary: Список вопросов по вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Добавить вопрос к вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateRequest'
      responses:
        '201':
          description: Вопрос добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /questions/{id}:
    put:
      summary: Обновить вопрос
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdateRequest'
      responses:
        '200':
          description: Вопрос обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      summary: Удалить вопрос
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Вопрос удалён

  /positions/{positionId}/candidates:
    get:
      summary: Список кандидатов по вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    post:
      summary: Добавить кандидата к вакансии
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateRequest'
      responses:
        '201':
          description: Кандидат добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'

  /candidates/{id}:
    get:
      summary: Получить кандидата
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    put:
      summary: Обновить кандидата
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdateRequest'
      responses:
        '200':
          description: Кандидат обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    delete:
      summary: Удалить кандидата
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Кандидат удалён

  /candidates/{candidateId}/interview:
    get:
      summary: Получить интервью кандидата
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'
    post:
      summary: Начать интервью
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Интервью начато
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'

  /candidates/{candidateId}/interview/answer:
    post:
      summary: Отправить ответ на вопрос интервью
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewAnswerCreateRequest'
      responses:
        '201':
          description: Ответ сохранён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewAnswer'

  /candidates/{candidateId}/interview/finish:
    post:
      summary: Завершить интервью
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Интервью завершено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'

  /branding:
    get:
      summary: Получить настройки брендинга
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'
    put:
      summary: Обновить настройки брендинга
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandingUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'

  /users:
    get:
      summary: Список пользователей
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Добавить пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Пользователь добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Получить пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Обновить пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Удалить пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Пользователь удалён

  /tariffs:
    get:
      summary: Список тарифов
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
    post:
      summary: Создать тариф
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffCreateRequest'
      responses:
        '201':
          description: Тариф создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'

  /tariffs/{id}:
    put:
      summary: Обновить тариф
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffUpdateRequest'
      responses:
        '200':
          description: Тариф обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
    delete:
      summary: Удалить тариф
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Тариф удалён

  /stats/positions:
    get:
      summary: Общая статистика по вакансиям
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PositionStats'

  /stats/candidates:
    get:
      summary: Общая статистика по кандидатам
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  inProgress:
                    type: integer
                  finished:
                    type: integer
                  hired:
                    type: integer

  /ai/generate-questions:
    post:
      summary: Генерация вопросов AI (мок)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                positionDescription:
                  type: string
      responses:
        '200':
          description: Сгенерированные вопросы
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

  /ai/transcribe:
    post:
      summary: Транскрипция аудио (мок)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
      responses:
        '200':
          description: Результат транскрипции
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript:
                    type: string

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, recruiter, viewer]
        avatarUrl:
          type: string
        language:
          type: string
      required: [id, name, email, role]
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, recruiter, viewer]
        password:
          type: string
      required: [name, email, role, password]
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        avatarUrl:
          type: string
        language:
          type: string
    Position:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        company:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, draft, archived]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        publicLink:
          type: string
        stats:
          $ref: '#/components/schemas/PositionStats'
        team:
          type: array
          items:
            $ref: '#/components/schemas/User'
        branding:
          $ref: '#/components/schemas/Branding'
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
        topics:
          type: array
          items:
            type: string
          description: "Ключевые темы/теги позиции"
        minScore:
          type: number
          format: float
          description: "Минимальный проходной балл"
        avgScore:
          type: number
          format: float
          description: "Средний балл по позиции"
      required: [id, title, company, status, createdAt]
    PositionCreateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, draft, archived]
        team:
          type: array
          items:
            type: string
        brandingId:
          type: string
      required: [title, status]
    PositionUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, draft, archived]
        team:
          type: array
          items:
            type: string
        brandingId:
          type: string
    PositionStats:
      type: object
      properties:
        positionId:
          type: string
        interviewsTotal:
          type: integer
          description: "Всего собеседований"
        interviewsSuccessful:
          type: integer
          description: "Успешно завершенные"
        interviewsInProgress:
          type: integer
          description: "В процессе"
        interviewsUnsuccessful:
          type: integer
          description: "Неуспешно завершенные"
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        positionId:
          type: string
        text:
          type: string
        type:
          type: string
          enum: [text, audio, video, choice]
        order:
          type: integer
        isRequired:
          type: boolean
      required: [id, positionId, text, type, order]
    QuestionCreateRequest:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
          enum: [text, audio, video, choice]
        order:
          type: integer
        isRequired:
          type: boolean
      required: [text, type, order]
    QuestionUpdateRequest:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
          enum: [text, audio, video, choice]
        order:
          type: integer
        isRequired:
          type: boolean
    Candidate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [new, in_progress, finished, rejected, hired]
        interview:
          $ref: '#/components/schemas/Interview'
        positionId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, firstName, lastName, status, positionId]
    CandidateCreateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required: [name]
    CandidateUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [new, in_progress, finished, rejected, hired]
    Interview:
      type: object
      properties:
        id:
          type: string
        candidateId:
          type: string
        positionId:
          type: string
        status:
          type: string
          enum: [not_started, in_progress, finished]
        result:
          type: string
          enum: [successful, unsuccessful]
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        transcript:
          type: string
        audioUrl:
          type: string
        aiScore:
          type: number
        answers:
          type: array
          items:
            $ref: '#/components/schemas/InterviewAnswer'
      required:
        - id
        - candidateId
        - positionId
        - status
        - startedAt
    InterviewAnswer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        interviewId:
          type: string
        questionId:
          type: string
        answerText:
          type: string
        audioUrl:
          type: string
        transcript:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, interviewId, questionId]
    InterviewAnswerCreateRequest:
      type: object
      properties:
        questionId:
          type: string
        answerText:
          type: string
        audioUrl:
          type: string
        transcript:
          type: string
      required: [questionId]
    Branding:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string
        logoUrl:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        emailSignature:
          type: string
      required: [id, companyName]
    BrandingUpdateRequest:
      type: object
      properties:
        companyName:
          type: string
        logoUrl:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        emailSignature:
          type: string
    Tariff:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        features:
          type: array
          items:
            type: string
        price:
          type: number
        isActive:
          type: boolean
      required: [id, name, price]
    TariffCreateRequest:
      type: object
      properties:
        name:
          type: string
        features:
          type: array
          items:
            type: string
        price:
          type: number
        isActive:
          type: boolean
      required: [name, price]
    TariffUpdateRequest:
      type: object
      properties:
        name:
          type: string
        features:
          type: array
          items:
            type: string
        price:
          type: number
        isActive:
          type: boolean 